#+TITLE:  3 Sep 03 de 09mmm 2021
* 09:28 KNN :ATTACH:
:PROPERTIES:
:header-args:jupyter: :async no
:ID:       ad53b22f-f40d-4f6a-b2d1-3e5abcfa0e4f
:END:

#+begin_src jupyter-python
print("hello")
#+end_src

#+RESULTS:
: hello

#+begin_src jupyter-python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
plt.style.use('dark_background')
gray = '#23272e'
gray2 = '#23272e'
plt.rcParams.update({
  "lines.color": "white",
  "patch.edgecolor": "white",
  "text.color": "white",
  "axes.facecolor": gray2,
  "axes.edgecolor": "lightgray",
  "axes.labelcolor": "white",
  "xtick.color": "white",
  "ytick.color": "white",
  "grid.color": "lightgray",
  "figure.facecolor": gray,
  "figure.edgecolor": gray,
  "savefig.facecolor": gray,
  "savefig.edgecolor": gray})

plt.plot([1,2,3,4], [1,2,3,4])
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3d504f28c7a8c4771110a0a1400c7f609d52fac2.png]]

#+begin_src jupyter-python
n = 50
n_neighbors = 3
x1 = pd.Series(np.random.rand(n) - np.random.randn(n)/2
               - 0.7)
y1 = pd.Series(np.random.rand(n) - np.random.randn(n)/2
               + 0.7)
x2 = pd.Series(np.random.rand(n) + np.random.randn(n)/2
               + 0.7)
y2 = pd.Series(np.random.rand(n) + np.random.randn(n)/2
               + 0.7)
x3 = pd.Series(np.random.rand(n) - np.random.randn(n)/2
               - 0.0)
y3 = pd.Series(np.random.rand(n) - np.random.randn(n)/2
               - 0.7)
#+end_src

#+RESULTS:

#+begin_src jupyter-python
plt.title('Scatter plot')
plt.xlabel('X range')
plt.ylabel('Y whatever')

# plot the points in a scatter plot
plt.scatter(x1, y1, c='red', label='Red Range')  # 'c' parameter is the colour and 'label' is the text for the legend
plt.scatter(x2, y2, c='blue', label='Blue Range')
plt.scatter(x3, y3, c='green', label='Green Range')

plt.legend(loc=4)  # the locations 1,2,3 and 4 are top-right, top-left, bottom-left and bottom-right
# Show the graph with the two sets of points
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e15b311fdef0034da211cfe0af5465d628830815.png]]

#+begin_src jupyter-python
x = pd.Series([]).append(x1).append(x2).append(x3)
y = pd.Series([]).append(y2).append(y2).append(y3)
# D = pd.DataFrame({'x': x, 'y': y})

x.hist(bins=n)
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: <ipython-input-201-8685af42a1e8>:1: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
:   x = pd.Series([]).append(x1).append(x2).append(x3)
: <ipython-input-201-8685af42a1e8>:2: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
:   y = pd.Series([]).append(y2).append(y2).append(y3)
[[file:./.ob-jupyter/365658b6f9f7bbb192e38e182088a9790cb64088.png]]
:END:

#+begin_src jupyter-python
x.corr(y)
#+end_src

#+RESULTS:
: 0.008341289551043936

#+begin_src jupyter-python
x.shape
#+end_src

#+RESULTS:
| 150 |

#+begin_src jupyter-python
x.values
#+end_src

#+RESULTS:
#+begin_example
array([ 0.1104133 , -0.06273459, -0.50325267,  0.15168193, -0.89810115,
       -0.10716524, -1.03956818,  0.27205796, -0.80058806,  0.05875678,
       -0.48942699, -0.19050171, -0.7215899 , -1.29100258, -0.36750976,
       -0.68495386, -0.97690786, -0.22681629,  0.71441731, -0.05727941,
       -1.33697583, -1.01204076,  0.12907357, -0.89267006, -0.51936037,
       -0.38953882, -0.63289365, -0.29957525, -0.36854783,  0.68026579,
       -0.52972527, -1.51011249, -0.11465351,  0.54343617, -0.68873814,
       -0.95612153,  0.25550574, -0.75300303,  0.54392335,  0.28380955,
        1.05682548, -0.17940901, -1.65097964,  0.6645548 ,  0.56967126,
       -0.80789441, -0.07311693, -0.81545094, -0.77216586, -0.46956248,
        1.9705485 ,  1.41409377,  0.98172448,  1.01397435,  1.04054365,
        0.26025573,  0.35859312,  0.57436287,  1.37321889,  0.81244123,
        1.2580936 ,  1.2742309 ,  1.45338881,  1.80676576,  1.52280004,
        0.72995551,  0.86912107,  1.00213101,  1.38430969,  1.91395365,
        1.32454775,  1.71633293,  0.78164428,  0.84482797,  0.3015554 ,
        2.46857897,  1.80413321,  0.94473233,  0.8938695 ,  0.39340158,
        1.95193731,  1.92523105,  1.47426081,  0.80011345,  1.76911144,
        1.53059255,  1.13374293,  1.25484182,  1.15041988,  0.40819919,
        0.19336575,  1.01075608,  0.6858872 ,  1.00812925,  1.53581338,
        1.19871593,  0.5027703 ,  0.29975977,  1.43641591,  2.055063  ,
       -0.10406474,  0.66091691,  0.6014484 ,  0.75020443,  1.15323216,
        0.31319934,  0.46761043, -0.59365294,  0.9732062 ,  0.20778186,
        0.55468222,  1.30765408,  1.14271061, -0.45049091,  0.80208981,
        0.28435978, -0.22347608,  0.78451812,  1.24072457, -0.45027695,
       -0.19738127,  0.69804525, -0.41275697,  0.86093379,  0.44385759,
       -1.05888598, -0.5355796 ,  0.60124471,  0.31505572,  1.07136845,
        0.77892485, -0.44900295,  0.05783164,  0.69345691, -0.46091507,
        0.78030573,  0.37300271, -0.73684245, -0.3793566 ,  0.39453869,
        0.8497396 ,  0.2975773 , -0.29306815,  1.60031435,  0.66929538,
        0.10208133,  0.54587823,  0.69822362, -0.21807119,  1.39937225])
#+end_example

#+begin_src jupyter-python
xy = np.column_stack((x.values, y.values))
xy
#+end_src

#+RESULTS:
#+begin_example
array([[ 1.10413298e-01,  1.12996409e+00],
       [-6.27345859e-02,  7.55442864e-01],
       [-5.03252665e-01,  9.24051878e-01],
       [ 1.51681927e-01,  1.34772737e+00],
       [-8.98101148e-01,  9.63763558e-01],
       [-1.07165237e-01,  3.80090707e-01],
       [-1.03956818e+00,  1.29431480e+00],
       [ 2.72057964e-01,  2.06698087e+00],
       [-8.00588057e-01,  1.66312609e+00],
       [ 5.87567795e-02,  1.14951481e+00],
       [-4.89426991e-01,  1.15726562e+00],
       [-1.90501708e-01,  7.05686641e-01],
       [-7.21589895e-01,  1.63772589e+00],
       [-1.29100258e+00,  9.14071337e-01],
       [-3.67509757e-01,  1.27303471e+00],
       [-6.84953856e-01,  2.82226384e-01],
       [-9.76907862e-01,  1.05049614e+00],
       [-2.26816292e-01,  1.07742859e+00],
       [ 7.14417315e-01,  1.31272839e+00],
       [-5.72794065e-02,  8.26712804e-01],
       [-1.33697583e+00,  1.02613683e+00],
       [-1.01204076e+00,  1.04672144e+00],
       [ 1.29073569e-01,  1.17216140e+00],
       [-8.92670064e-01,  1.91416462e+00],
       [-5.19360373e-01,  1.21206039e-01],
       [-3.89538815e-01,  1.56338207e+00],
       [-6.32893648e-01,  1.08063060e+00],
       [-2.99575254e-01,  2.55474447e+00],
       [-3.68547829e-01,  5.07788962e-01],
       [ 6.80265792e-01,  4.07045695e-01],
       [-5.29725271e-01,  1.29970891e+00],
       [-1.51011249e+00,  5.55420427e-01],
       [-1.14653509e-01,  1.89888311e+00],
       [ 5.43436166e-01,  1.07455468e-01],
       [-6.88738139e-01,  1.44677341e-01],
       [-9.56121532e-01,  1.84733739e+00],
       [ 2.55505743e-01,  1.42946407e+00],
       [-7.53003032e-01,  6.13231042e-01],
       [ 5.43923354e-01,  1.57953588e+00],
       [ 2.83809551e-01, -5.10815278e-03],
       [ 1.05682548e+00,  1.32001189e+00],
       [-1.79409006e-01,  9.21789071e-01],
       [-1.65097964e+00,  5.27831394e-01],
       [ 6.64554799e-01,  1.04241115e+00],
       [ 5.69671259e-01,  9.71222070e-01],
       [-8.07894414e-01,  8.40510216e-01],
       [-7.31169303e-02,  2.26549536e+00],
       [-8.15450939e-01,  1.93691797e+00],
       [-7.72165856e-01,  1.24230151e+00],
       [-4.69562481e-01,  8.94565787e-01],
       [ 1.97054850e+00,  1.12996409e+00],
       [ 1.41409377e+00,  7.55442864e-01],
       [ 9.81724485e-01,  9.24051878e-01],
       [ 1.01397435e+00,  1.34772737e+00],
       [ 1.04054365e+00,  9.63763558e-01],
       [ 2.60255729e-01,  3.80090707e-01],
       [ 3.58593120e-01,  1.29431480e+00],
       [ 5.74362867e-01,  2.06698087e+00],
       [ 1.37321889e+00,  1.66312609e+00],
       [ 8.12441226e-01,  1.14951481e+00],
       [ 1.25809360e+00,  1.15726562e+00],
       [ 1.27423090e+00,  7.05686641e-01],
       [ 1.45338881e+00,  1.63772589e+00],
       [ 1.80676576e+00,  9.14071337e-01],
       [ 1.52280004e+00,  1.27303471e+00],
       [ 7.29955510e-01,  2.82226384e-01],
       [ 8.69121073e-01,  1.05049614e+00],
       [ 1.00213101e+00,  1.07742859e+00],
       [ 1.38430969e+00,  1.31272839e+00],
       [ 1.91395365e+00,  8.26712804e-01],
       [ 1.32454775e+00,  1.02613683e+00],
       [ 1.71633293e+00,  1.04672144e+00],
       [ 7.81644280e-01,  1.17216140e+00],
       [ 8.44827968e-01,  1.91416462e+00],
       [ 3.01555396e-01,  1.21206039e-01],
       [ 2.46857897e+00,  1.56338207e+00],
       [ 1.80413321e+00,  1.08063060e+00],
       [ 9.44732330e-01,  2.55474447e+00],
       [ 8.93869504e-01,  5.07788962e-01],
       [ 3.93401578e-01,  4.07045695e-01],
       [ 1.95193731e+00,  1.29970891e+00],
       [ 1.92523105e+00,  5.55420427e-01],
       [ 1.47426081e+00,  1.89888311e+00],
       [ 8.00113451e-01,  1.07455468e-01],
       [ 1.76911144e+00,  1.44677341e-01],
       [ 1.53059255e+00,  1.84733739e+00],
       [ 1.13374293e+00,  1.42946407e+00],
       [ 1.25484182e+00,  6.13231042e-01],
       [ 1.15041988e+00,  1.57953588e+00],
       [ 4.08199187e-01, -5.10815278e-03],
       [ 1.93365750e-01,  1.32001189e+00],
       [ 1.01075608e+00,  9.21789071e-01],
       [ 6.85887203e-01,  5.27831394e-01],
       [ 1.00812925e+00,  1.04241115e+00],
       [ 1.53581338e+00,  9.71222070e-01],
       [ 1.19871593e+00,  8.40510216e-01],
       [ 5.02770296e-01,  2.26549536e+00],
       [ 2.99759765e-01,  1.93691797e+00],
       [ 1.43641591e+00,  1.24230151e+00],
       [ 2.05506300e+00,  8.94565787e-01],
       [-1.04064739e-01, -6.14103383e-01],
       [ 6.60916907e-01,  2.13510983e-01],
       [ 6.01448401e-01, -7.35348429e-01],
       [ 7.50204425e-01,  5.31064118e-02],
       [ 1.15323216e+00, -5.98348487e-01],
       [ 3.13199342e-01, -6.89595394e-01],
       [ 4.67610431e-01, -8.34565768e-01],
       [-5.93652942e-01,  9.76083888e-01],
       [ 9.73206204e-01,  1.08685565e-01],
       [ 2.07781855e-01, -1.13150237e+00],
       [ 5.54682218e-01,  1.88502682e-01],
       [ 1.30765408e+00,  6.78349343e-01],
       [ 1.14271061e+00, -3.61011952e-01],
       [-4.50490914e-01, -1.65241859e-02],
       [ 8.02089813e-01, -5.65970055e-01],
       [ 2.84359776e-01,  1.23428859e+00],
       [-2.23476079e-01, -8.74761610e-01],
       [ 7.84518125e-01, -1.25710141e-01],
       [ 1.24072457e+00, -1.65163496e-01],
       [-4.50276949e-01, -8.74238495e-02],
       [-1.97381273e-01, -3.83613647e-01],
       [ 6.98045250e-01, -9.27486028e-01],
       [-4.12756971e-01, -4.82609591e-01],
       [ 8.60933790e-01, -1.05821034e+00],
       [ 4.43857588e-01, -1.02528643e+00],
       [-1.05888598e+00, -8.03271516e-01],
       [-5.35579602e-01, -4.52310140e-01],
       [ 6.01244707e-01, -6.83306441e-01],
       [ 3.15055719e-01,  7.60306439e-02],
       [ 1.07136845e+00, -7.77775165e-01],
       [ 7.78924852e-01,  3.13150240e-01],
       [-4.49002952e-01,  6.39088098e-01],
       [ 5.78316420e-02, -1.07003740e-01],
       [ 6.93456907e-01, -6.37656632e-01],
       [-4.60915069e-01, -6.18528176e-02],
       [ 7.80305730e-01,  2.79519634e-01],
       [ 3.73002708e-01,  7.76675739e-02],
       [-7.36842446e-01,  2.27006610e-01],
       [-3.79356604e-01,  2.86236758e-01],
       [ 3.94538689e-01,  1.47548515e-02],
       [ 8.49739604e-01, -9.07522213e-01],
       [ 2.97577302e-01,  1.18361150e+00],
       [-2.93068153e-01, -1.53289446e-04],
       [ 1.60031435e+00, -8.01399665e-02],
       [ 6.69295379e-01, -1.08272373e+00],
       [ 1.02081328e-01, -9.76956507e-01],
       [ 5.45878231e-01,  5.97607494e-01],
       [ 6.98223622e-01, -2.69358304e-01],
       [-2.18071188e-01, -3.32665263e-01],
       [ 1.39937225e+00, -1.20792146e+00]])
#+end_example

#+begin_src jupyter-python
from sklearn.neighbors import KNeighborsClassifier, NearestNeighbors
nbrs = NearestNeighbors().fit(xy)
distances, indices = nbrs.kneighbors(xy)
knn=KNeighborsClassifier()
# x_train, x_test, y_train, y_test = cross_validation.train_test_split

# knn.fit(x.values, y.values)
# nbrs.kneighbors(np.array([0,0]))
#+end_src

#+RESULTS:

#+begin_src jupyter-python
indices
#+end_src

#+RESULTS:
#+begin_example
array([[  0,  22,   9, 141, 115],
       [  1,  19,  11,  41,  17],
       [  2,  49, 107,  26,  10],
       [  3,  90,  36, 115,  22],
       [  4,  16,  21,  45,  26],
       [  5, 138,  28,  11,  55],
       [  6,  21,  16,  48,   4],
       [  7,  97,  57,  96,  46],
       [  8,  12,  35,  23,  47],
       [  9,   0,  22,  90,   3],
       [ 10,  30,  26,  14, 107],
       [ 11,   1,  19,  41,  28],
       [ 12,   8,  47,  35,  23],
       [ 13,  20,  21,  16,   4],
       [ 14,  30,  10,  17,  25],
       [ 15, 137,  34,  24, 138],
       [ 16,  21,   4,   6,  45],
       [ 17,  41,  14,  10,   9],
       [ 18,  72,  59,  43,  53],
       [ 19,   1,  41,  11,  17],
       [ 20,  13,  21,  16,   6],
       [ 21,  16,   4,   6,  45],
       [ 22,   0,   9,  90, 115],
       [ 23,  47,  35,   8,  12],
       [ 24, 113,  34, 134, 138],
       [ 25,  14,  30,  12,  10],
       [ 26, 107,  10,   2,  48],
       [ 27,  46,  32,   7,  47],
       [ 28, 131, 138,  11,   5],
       [ 29,  92,  65, 130, 135],
       [ 30,  10,  14,  26,  48],
       [ 31,  42,  13,  20,  21],
       [ 32,  46,  97,   7,  25],
       [ 33, 110, 101, 136, 139],
       [ 34, 137,  15,  24, 113],
       [ 35,  23,  47,   8,  12],
       [ 36,  90,   3,  56, 115],
       [ 37,  45, 131,  15,   4],
       [ 38,  18,  36,  56, 115],
       [ 39, 128, 139, 136,  89],
       [ 40,  53,  86,  67,  60],
       [ 41,  19,  17,   1,  11],
       [ 42,  31,  13,  20,  21],
       [ 43,  44,  72,  59,  66],
       [ 44,  43,  72,  59,  66],
       [ 45,   4,  37, 107,  16],
       [ 46,  27,  32,   7,  97],
       [ 47,  23,  35,   8,  12],
       [ 48,  26,  30,   6,  16],
       [ 49,   2, 107,  26, 131],
       [ 50,  80,  76,  99,  71],
       [ 51, 111,  61,  87,  95],
       [ 52,  91,  54,  93,  67],
       [ 53,  40,  86,  88,  67],
       [ 54,  91,  52,  93,  67],
       [ 55,  79,  74, 128, 136],
       [ 56, 115, 141,  90,  36],
       [ 57,  96,   7,  97,  73],
       [ 58,  62,  88,  85,  82],
       [ 59,  72,  66,  43,  18],
       [ 60,  70,  98,  68,  40],
       [ 61, 111,  87,  51,  95],
       [ 62,  58,  85,  82,  88],
       [ 63,  69,  71,  76,  99],
       [ 64,  98,  68,  60,  71],
       [ 65, 135, 130, 101,  29],
       [ 66,  59,  67,  93,  72],
       [ 67,  93,  54,  66,  52],
       [ 68,  98,  64,  60,  86],
       [ 69,  63,  99,  81,  76],
       [ 70,  60,  94,  95,  98],
       [ 71,  76,  63,  94,  50],
       [ 72,  59,  66,  18,  43],
       [ 73,  57,  38,  88,  96],
       [ 74, 128, 136,  39, 139],
       [ 75,  80,  50,  99,  76],
       [ 76,  71,  63,  50,  80],
       [ 77,  96,  57,  73,   7],
       [ 78,  92, 130,  29, 135],
       [ 79,  55, 146, 110,  29],
       [ 80,  50,  76,  71,  63],
       [ 81,  69,  99,  63,  84],
       [ 82,  85,  58,  62,  88],
       [ 83, 103, 108, 135, 101],
       [ 84, 143,  81, 118,  87],
       [ 85,  82,  62,  58,  88],
       [ 86,  40,  53,  88,  68],
       [ 87, 111,  61,  51,  95],
       [ 88,  86,  58,  53,  40],
       [ 89, 139, 136, 128,  39],
       [ 90,   3, 115,  36,  22],
       [ 91,  52,  54,  93,  67],
       [ 92,  29, 146,  78, 130],
       [ 93,  67,  54,  91,  52],
       [ 94,  71,  70,  51,  63],
       [ 95,  61, 111,  54,  91],
       [ 96,  57,   7,  97,  73],
       [ 97,   7,  57,  96,  32],
       [ 98,  68,  64,  60,  70],
       [ 99,  69,  63,  50,  76],
       [100, 120, 116, 148, 122],
       [101,  65, 110, 135, 130],
       [102, 127, 133, 106, 121],
       [103,  83, 117, 101,  33],
       [104, 129, 112, 114, 140],
       [105, 106, 127, 102, 145],
       [106, 102, 124, 127, 105],
       [107,   2,  26,  49,  10],
       [108,  83, 103, 135, 130],
       [109, 145, 124, 106, 105],
       [110,  33, 101,  65, 136],
       [111,  61,  87,  51,  95],
       [112, 118, 104, 114, 129],
       [113, 134, 119,  24, 142],
       [114, 133, 127, 102, 147],
       [115, 141,  56,  90,  22],
       [116, 100, 145, 122, 120],
       [117, 147, 103,  83, 108],
       [118, 112, 143, 108, 104],
       [119, 134, 113, 142,  24],
       [120, 148, 122, 100, 126],
       [121, 140, 144, 123, 102],
       [122, 126, 120, 148, 100],
       [123, 140, 144, 121, 129],
       [124, 106, 144, 109, 121],
       [125, 126, 122, 116, 119],
       [126, 122, 148, 120, 119],
       [127, 102, 133, 106, 114],
       [128,  74, 136,  39, 139],
       [129, 104, 140, 114, 123],
       [130, 135,  65,  29, 101],
       [131,  28,  49,  11,   2],
       [132,  39, 128,  74, 148],
       [133, 127, 114, 102, 121],
       [134, 119, 113, 142,  24],
       [135, 130,  65, 101,  29],
       [136, 128, 139,  74,  89],
       [137,  15,  34,  24, 138],
       [138,  24,  28,   5, 142],
       [139,  89, 136, 128,  39],
       [140, 123, 121, 144, 129],
       [141, 115,  56,  22,  90],
       [142, 113, 134, 119,  24],
       [143,  84, 118, 112, 108],
       [144, 121, 123, 124, 140],
       [145, 109, 116, 124, 105],
       [146,  92,  29,  79,  55],
       [147, 117, 114, 103, 133],
       [148, 120, 122, 100, 119],
       [149, 129, 123, 140, 104]])
#+end_example

#+begin_src jupyter-python
distances
#+end_src

#+RESULTS:
#+begin_example
array([[0.        , 0.04613912, 0.05523248, 0.19470082, 0.20283239],
       [0.        , 0.07147841, 0.13711353, 0.2031846 , 0.36138292],
       [0.        , 0.04477117, 0.10430503, 0.20328227, 0.2336232 ],
       [0.        , 0.05005686, 0.13213732, 0.17456165, 0.17701567],
       [0.        , 0.11718805, 0.14094057, 0.15273716, 0.28981533],
       [0.        , 0.28791788, 0.29090841, 0.33609177, 0.36742097],
       [0.        , 0.2491189 , 0.25174164, 0.272414  , 0.35955117],
       [0.        , 0.13298026, 0.3023049 , 0.30436192, 0.39818803],
       [0.        , 0.0829812 , 0.24109015, 0.26739378, 0.27419499],
       [0.        , 0.05523248, 0.07387367, 0.2172299 , 0.21891392],
       [0.        , 0.14803392, 0.1626518 , 0.16812583, 0.20902122],
       [0.        , 0.13711353, 0.17998754, 0.21638694, 0.26620277],
       [0.        , 0.0829812 , 0.31356944, 0.31455058, 0.32509506],
       [0.        , 0.12112892, 0.3088944 , 0.34244302, 0.39603138],
       [0.        , 0.164394  , 0.16812583, 0.24094897, 0.29118185],
       [0.        , 0.07577367, 0.13760109, 0.23097349, 0.30562357],
       [0.        , 0.03533509, 0.11718805, 0.25174164, 0.26955451],
       [0.        , 0.16269944, 0.24094897, 0.27447829, 0.29453082],
       [0.        , 0.15581574, 0.1903874 , 0.27487758, 0.30159467],
       [0.        , 0.07147841, 0.15477447, 0.17998754, 0.30265683],
       [0.        , 0.12112892, 0.32558644, 0.36089101, 0.40046314],
       [0.        , 0.03533509, 0.14094057, 0.2491189 , 0.29017029],
       [0.        , 0.04613912, 0.07387367, 0.16122423, 0.16725308],
       [0.        , 0.0805016 , 0.09215187, 0.26739378, 0.32509506],
       [0.        , 0.15398902, 0.17099629, 0.19216243, 0.21641671],
       [0.        , 0.29118185, 0.29862314, 0.34027184, 0.4182203 ],
       [0.        , 0.11166847, 0.1626518 , 0.20328227, 0.21338752],
       [0.        , 0.36735326, 0.68143244, 0.7514505 , 0.80488341],
       [0.        , 0.1539886 , 0.22181571, 0.26620277, 0.29090841],
       [0.        , 0.12091644, 0.1343463 , 0.13619826, 0.16208296],
       [0.        , 0.14803392, 0.164394  , 0.24215495, 0.24914463],
       [0.        , 0.1435434 , 0.42028517, 0.50154784, 0.69960856],
       [0.        , 0.36895775, 0.41615503, 0.42166648, 0.43373135],
       [0.        , 0.08182374, 0.15827033, 0.173017  , 0.1753963 ],
       [0.        , 0.09535268, 0.13760109, 0.17099629, 0.28765895],
       [0.        , 0.09215187, 0.16677199, 0.24109015, 0.31455058],
       [0.        , 0.12586166, 0.13213732, 0.16997745, 0.19729679],
       [0.        , 0.23381379, 0.30509775, 0.33792717, 0.37937647],
       [0.        , 0.31662979, 0.325125  , 0.34014462, 0.43193627],
       [0.        , 0.08694727, 0.11249658, 0.121685  , 0.12438964],
       [0.        , 0.051033  , 0.13377621, 0.24867276, 0.25883432],
       [0.        , 0.15477447, 0.16269944, 0.2031846 , 0.21638694],
       [0.        , 0.1435434 , 0.52798179, 0.58898786, 0.82309767],
       [0.        , 0.11862028, 0.17477149, 0.18259679, 0.20472598],
       [0.        , 0.11862028, 0.29207735, 0.30120683, 0.30976535],
       [0.        , 0.15273716, 0.23381379, 0.25353428, 0.26955451],
       [0.        , 0.36735326, 0.36895775, 0.39818803, 0.49699108],
       [0.        , 0.0805016 , 0.16677199, 0.27419499, 0.31356944],
       [0.        , 0.21338752, 0.24914463, 0.272414  , 0.28055051],
       [0.        , 0.04477117, 0.14847102, 0.24758268, 0.25630362],
       [0.        , 0.17076206, 0.17357374, 0.2501101 , 0.26749747],
       [0.        , 0.1314261 , 0.14844967, 0.21350735, 0.23156871],
       [0.        , 0.02911965, 0.0709698 , 0.12126883, 0.15472828],
       [0.        , 0.051033  , 0.14500138, 0.26898433, 0.27055812],
       [0.        , 0.05146996, 0.0709698 , 0.08506548, 0.11998029],
       [0.        , 0.13584693, 0.26215822, 0.30895883, 0.32275631],
       [0.        , 0.09546588, 0.12640471, 0.16721371, 0.16997745],
       [0.        , 0.21102961, 0.3023049 , 0.30384737, 0.31065122],
       [0.        , 0.08409747, 0.2379637 , 0.24228138, 0.25649726],
       [0.        , 0.03822722, 0.11409338, 0.18259679, 0.1903874 ],
       [0.        , 0.14700651, 0.19755998, 0.20024778, 0.25883432],
       [0.        , 0.04317912, 0.09446679, 0.14844967, 0.15453125],
       [0.        , 0.08409747, 0.22337726, 0.26198996, 0.30850647],
       [0.        , 0.13827782, 0.16054329, 0.16658006, 0.24906221],
       [0.        , 0.09168832, 0.14406654, 0.28891518, 0.29777957],
       [0.        , 0.05042292, 0.05791616, 0.09740706, 0.1343463 ],
       [0.        , 0.11409338, 0.13570925, 0.1392431 , 0.14984867],
       [0.        , 0.03552745, 0.11998029, 0.13570925, 0.15472828],
       [0.        , 0.0876071 , 0.14406654, 0.20024778, 0.27642524],
       [0.        , 0.13827782, 0.15657546, 0.27152667, 0.27664919],
       [0.        , 0.14700651, 0.21828604, 0.2242563 , 0.24339608],
       [0.        , 0.09412077, 0.16054329, 0.19567183, 0.26749747],
       [0.        , 0.03822722, 0.14984867, 0.15581574, 0.17477149],
       [0.        , 0.31065122, 0.4500222 , 0.45316974, 0.49034349],
       [0.        , 0.0471495 , 0.08366789, 0.12755466, 0.14134266],
       [0.        , 0.58003634, 0.66021625, 0.78632734, 0.82130211],
       [0.        , 0.09412077, 0.16658006, 0.17357374, 0.26427515],
       [0.        , 0.52820023, 0.61244335, 0.64832355, 0.83090561],
       [0.        , 0.20894578, 0.22604536, 0.23616891, 0.25495807],
       [0.        , 0.13584693, 0.24405518, 0.27161092, 0.28686421],
       [0.        , 0.17076206, 0.26427515, 0.34570519, 0.41205717],
       [0.        , 0.27152667, 0.36314723, 0.37770954, 0.43941235],
       [0.        , 0.07635592, 0.25649726, 0.26198996, 0.45481381],
       [0.        , 0.07378842, 0.17309712, 0.17320053, 0.17499557],
       [0.        , 0.28113214, 0.43941235, 0.61253084, 0.69571246],
       [0.        , 0.07635592, 0.22337726, 0.24228138, 0.4650257 ],
       [0.        , 0.13377621, 0.14500138, 0.15099559, 0.27642524],
       [0.        , 0.08384228, 0.09446679, 0.21350735, 0.23410668],
       [0.        , 0.15099559, 0.2379637 , 0.26898433, 0.27588515],
       [0.        , 0.02410701, 0.08994784, 0.12352817, 0.12438964],
       [0.        , 0.05005686, 0.12501359, 0.12586166, 0.16122423],
       [0.        , 0.02911965, 0.05146996, 0.12065067, 0.15587832],
       [0.        , 0.12091644, 0.15643278, 0.20894578, 0.23397436],
       [0.        , 0.03552745, 0.08506548, 0.12065067, 0.12126883],
       [0.        , 0.19567183, 0.21828604, 0.24774246, 0.27691407],
       [0.        , 0.15453125, 0.19535524, 0.20052396, 0.20478076],
       [0.        , 0.21102961, 0.30436192, 0.38623358, 0.49034349],
       [0.        , 0.13298026, 0.30384737, 0.38623358, 0.41615503],
       [0.        , 0.0876071 , 0.09168832, 0.19755998, 0.24339608],
       [0.        , 0.15657546, 0.24906221, 0.2501101 , 0.31238737],
       [0.        , 0.24866341, 0.28670853, 0.30365257, 0.33553168],
       [0.        , 0.09740706, 0.10913856, 0.13642153, 0.15444694],
       [0.        , 0.05204239, 0.13419856, 0.16660337, 0.21505304],
       [0.        , 0.07378842, 0.18207907, 0.18358074, 0.2137918 ],
       [0.        , 0.19721967, 0.23756964, 0.35263197, 0.43323911],
       [0.        , 0.21179989, 0.28811401, 0.2918576 , 0.3565771 ],
       [0.        , 0.16660337, 0.19219409, 0.20183534, 0.21179989],
       [0.        , 0.10430503, 0.11166847, 0.14847102, 0.20902122],
       [0.        , 0.17309712, 0.22982349, 0.25767202, 0.28204795],
       [0.        , 0.18723521, 0.25886981, 0.39456588, 0.45430675],
       [0.        , 0.08182374, 0.10913856, 0.19875829, 0.21281886],
       [0.        , 0.04317912, 0.08384228, 0.1314261 , 0.19535524],
       [0.        , 0.21900537, 0.23756964, 0.39753032, 0.42282535],
       [0.        , 0.0465118 , 0.07089999, 0.15398902, 0.1582717 ],
       [0.        , 0.13015404, 0.23260822, 0.26257572, 0.31427172],
       [0.        , 0.05237242, 0.09546588, 0.12501359, 0.16725308],
       [0.        , 0.28670853, 0.34122049, 0.43544283, 0.49184069],
       [0.        , 0.16757546, 0.18207907, 0.23368658, 0.3009062 ],
       [0.        , 0.21900537, 0.36950481, 0.38283075, 0.4419323 ],
       [0.        , 0.02769562, 0.07089999, 0.17980755, 0.21977022],
       [0.        , 0.05498918, 0.23703774, 0.24866341, 0.34510479],
       [0.        , 0.15300239, 0.15787748, 0.20885766, 0.21505304],
       [0.        , 0.12650476, 0.23703774, 0.24573534, 0.33553168],
       [0.        , 0.15110335, 0.19319986, 0.20885766, 0.35060895],
       [0.        , 0.19219409, 0.23263972, 0.25886981, 0.27235324],
       [0.        , 0.63009797, 0.72132293, 0.8384632 , 0.93959717],
       [0.        , 0.12650476, 0.33930295, 0.34510479, 0.37472463],
       [0.        , 0.05204239, 0.10289312, 0.20183534, 0.23260822],
       [0.        , 0.0471495 , 0.0579701 , 0.08694727, 0.10036068],
       [0.        , 0.19721967, 0.25681441, 0.34259654, 0.35060895],
       [0.        , 0.03365894, 0.05791616, 0.13619826, 0.15444694],
       [0.        , 0.1539886 , 0.25630362, 0.26694243, 0.29008169],
       [0.        , 0.24788854, 0.31569893, 0.33388766, 0.35643442],
       [0.        , 0.10289312, 0.13015404, 0.13419856, 0.28986571],
       [0.        , 0.02769562, 0.0465118 , 0.1788279 , 0.19216243],
       [0.        , 0.03365894, 0.05042292, 0.13642153, 0.16208296],
       [0.        , 0.0579701 , 0.06649669, 0.08366789, 0.08994784],
       [0.        , 0.07577367, 0.09535268, 0.24185163, 0.3623594 ],
       [0.        , 0.21641671, 0.22181571, 0.28791788, 0.29910693],
       [0.        , 0.02410701, 0.06649669, 0.10036068, 0.11249658],
       [0.        , 0.15110335, 0.15300239, 0.25150684, 0.25681441],
       [0.        , 0.05237242, 0.12640471, 0.16889231, 0.17165406],
       [0.        , 0.1582717 , 0.1788279 , 0.17980755, 0.25678056],
       [0.        , 0.28113214, 0.36950481, 0.53692667, 0.65491962],
       [0.        , 0.15787748, 0.19319986, 0.23263972, 0.25150684],
       [0.        , 0.18723521, 0.34122049, 0.34517647, 0.3565771 ],
       [0.        , 0.15643278, 0.23318194, 0.24405518, 0.35901778],
       [0.        , 0.16757546, 0.31427172, 0.32662746, 0.36832917],
       [0.        , 0.05498918, 0.24573534, 0.30365257, 0.33773194],
       [0.        , 0.54093653, 0.55886438, 0.62636711, 0.65739193]])
#+end_example

#+begin_src jupyter-python
from sklearn.neighbors import NearestCentroid
from matplotlib.colors import ListedColormap

l = np.concatenate(([0]*n, [1]*n, [2]*n))
X = xy
# a = np.arange(0,20)
# b = np.arange(20,40)
# print(a.shape, a)
# print(b.shape, b)
# print(l.shape, l)
# X = np.column_stack((a,b))
h = .02  # step size in the mesh

# Create color maps
cmap_light = ListedColormap(['orange', 'cyan', 'cornflowerblue'])
cmap_bold = ListedColormap(['darkorange', 'c', 'darkblue'])

cs = np.concatenate((['red']*n, ['blue']*n, ['green']*n))
for shrinkage in [None, .2]:
    clf = NearestCentroid(shrink_threshold=shrinkage)
    clf.fit(X, l)
    y_pred = clf.predict(X)
    print(shrinkage, np.mean(y == y_pred))
    x_min, x_max = X[:, 0].min() - 0.3, X[:, 0].max() + 0.3
    y_min, y_max = X[:, 1].min() - 0.3, X[:, 1].max() + 0.3
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                        np.arange(y_min, y_max, h))
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])

    # Put the result into a color plot
    Z = Z.reshape(xx.shape)
    plt.figure()
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)

    # Plot also the training points
    plt.scatter(X[:, 0], X[:, 1], c=cs, cmap=cmap_bold,
                edgecolor='k', s=n)
    plt.title("3-Class classification (shrink_threshold=%r)"
            % shrinkage)
    plt.axis('tight')

plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: None 0.0
: 0.2 0.0
: <ipython-input-217-9c8fc7667fa1>:33: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.
:   plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
: <ipython-input-217-9c8fc7667fa1>:33: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.
:   plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
[[file:./.ob-jupyter/94ed8a3015cffbd38d8fcf6c28d51fae93ad0596.png]]
[[file:./.ob-jupyter/518332738e0929840b81be87e43b2d7e0f2b32dd.png]]
:END:

** Referencias
https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html
https://en.wikipedia.org/wiki/Iris_flower_data_set
https://stackoverflow.com/questions/48391568/matplotlib-creating-plot-for-black-background-presentation-slides
https://numpy.org/doc/1.16/reference/generated/numpy.random.randn.html#numpy.random.randn
https://www.geeksforgeeks.org/creating-a-pandas-series/
https://datacarpentry.org/python-socialsci/13-matplotlib/index.html
https://scikit-learn.org/stable/install.html
https://www.niko.io/notes/jupyter_emacs
https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html
https://www.youtube.com/watch?v=hzOCDgfsSSQ
