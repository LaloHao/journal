#+TITLE: 25 Aug 25 de 08mmm 2021
* 04:47 Como saber si un color es demasiado brillante
#+begin_src js
function luma(hex) { // inputs a hex string in the form of '#ff00ff'
  var rgb = parseInt(hex.substring(1), 16);   // convert rrggbb to decimal
  var r = (rgb >> 16) & 0xff;  // extract red
  var g = (rgb >>  8) & 0xff;  // extract green
  var b = (rgb >>  0) & 0xff;  // extract blue
  return 0.2126 * r + 0.7152 * g + 0.0722 * b; // per ITU-R BT.709
}
#+end_src

** References
How to check if hex color is “too black”?
https://stackoverflow.com/questions/12043187/how-to-check-if-hex-color-is-too-black
* 05:46 Pytorch: Training a classifier
** Load and normalize CIFAR10
Using =torchvision=, load CIFAR10
#+begin_src python
import torch
import torchvision
import torchvision.transforms as transforms
#+end_src

#+RESULTS:

The output of torchvision datasets are PILImage images of range[0, 1], transform them into range [-1, 1]

#+begin_src python
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

batch_size = 4

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
#+end_src

#+RESULTS:
: Files already downloaded and verified
: Files already downloaded and verified

Let us show some of the training images, for fun
#+begin_src python :results output drawer
import matplotlib.pyplot as plt
import numpy as np

# functions to show an image

def imshow(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


# get some random training images
dataiter = iter(trainloader)
images, labels = dataiter.next()

# show images
some = torchvision.utils.make_grid(images)
imshow(some)
outputImages = 'some_images.png'
torchvision.utils.save_image(some, outputImages)
print(f"[[./{outputImages}]]".format(outputImages))
# print labels
print(' '.join('%5s' % classes[labels[j]] for j in range(batch_size)))
#+end_src

#+RESULTS:
:results:
[[./some_images.png]]
 bird horse plane  deer
:end:
** Define a Convolutional Neural Network
Copy the neural network from the Neural Networks section before and modify it to
take 3-channel images (instead of 1-channel images as it was defined).
#+begin_src python
import torch.nn as nn
import torch.nn.functional as F

# device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
device = "cuda:0"

class Net(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = torch.flatten(x, 1) # flatten all dimensions except batch
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


net = Net()
net.to(device)
#+end_src

#+RESULTS:

** Define a Loss function and optimizer
#+begin_src python
import torch.optim as optim

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)
#+end_src

#+RESULTS:

** Train the network
This is when things start to get interesting. We simply have to loop over our data iterator, and feed the inputs to the network and optimize.

#+begin_src python :async yes
for epoch in range(2):  # loop over the dataset multiple times

    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data[0].to(device), data[1].to(device)

        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if i % 2000 == 1999:    # print every 2000 mini-batches
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0

print('Finished Training')
#+end_src
* 17:09 Formatear la hora de otro color en xmobar
Se podria utilizar como contador de tareas, y quitar el texto de "Linux"
